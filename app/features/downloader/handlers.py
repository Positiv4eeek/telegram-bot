from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from app.utils import is_supported_url, is_youtube_regular, fmt_bytes, fmt_seconds
from app.features.downloader.media import extract_info, download_media
from app.core.telemetry import log_event
from app.core.config import settings
from app.core.db import Session
from app.core.models import Download, User
from sqlalchemy import select
import os
import asyncio

router = Router()

@router.message(Command("start"))
async def start(msg: Message):
    await msg.answer(
        "üé¨ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.\n\n"
        "üì± –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞:\n"
        "‚Ä¢ TikTok –≤–∏–¥–µ–æ\n"
        "‚Ä¢ YouTube Shorts\n"
        "‚Ä¢ Instagram Reels\n"
        "üé• –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∞—é –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ!\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /me\n\n"
        f"üì¶ –õ–∏–º–∏—Ç —Ñ–∞–π–ª–∞: {settings.max_mb} MB"
    )

@router.message(F.text)
async def handle_url(msg: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å URL"""
    try:
        text = msg.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π URL
        if not is_supported_url(text):
            if is_youtube_regular(text):
                return await msg.reply(
                    "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–æ–ª—å–∫–æ **YouTube Shorts**, –∞ –Ω–µ –æ–±—ã—á–Ω—ã–µ –≤–∏–¥–µ–æ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Shorts, TikTok –∏–ª–∏ Instagram Reels.",
                    parse_mode="Markdown"
                )
            elif any(domain in text.lower() for domain in ['youtube.com', 'youtu.be', 'tiktok.com', 'instagram.com', 'instagr.am']):
                return await msg.reply("‚ùå –ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–æ–ª—å–∫–æ TikTok, YouTube Shorts –∏ Instagram Reels.")
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                return

        url = text
        await log_event(msg.from_user.id, "get", url)
        
        # –°—Ä–∞–∑—É —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            meta = await extract_info(url)

            is_instagram_post_image = (
                ("instagram.com" in url or "instagr.am" in url)
                and "/p/" in url
            )

            if is_instagram_post_image:
                image_path = await download_media(url, kind="image")
                await msg.answer_photo(photo=FSInputFile(image_path), caption=f"üñºÔ∏è {meta.title}")
                await save_download_stats(msg.from_user.id, url, image_path, "image")
                try:
                    import shutil, os
                    shutil.rmtree(os.path.dirname(image_path), ignore_errors=True)
                except:
                    pass
                await log_event(msg.from_user.id, "download", f"image:{url}")
            else:
                await download_and_send_both(msg, url, meta)
        except Exception as e:
            await log_event(msg.from_user.id, "error", f"extract: {e}")
            await msg.reply(f"‚ùå –û—à–∏–±–∫–∞: {format_error_message(str(e))}")
        
    except Exception as e:
        await msg.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def download_and_send_both(msg: Message, url: str, meta):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        video_task = asyncio.create_task(download_media(url, kind="video"))
        audio_task = asyncio.create_task(download_media(url, kind="audio"))
        
        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –∑–∞–¥–∞—á
            video_path, audio_path = await asyncio.gather(video_task, audio_task)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await save_download_stats(msg.from_user.id, url, video_path, "video")
            await save_download_stats(msg.from_user.id, url, audio_path, "audio")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await msg.answer_video(
                video=FSInputFile(video_path),
                caption=f"üé• {meta.title}"
            )
            await msg.answer_audio(
                audio=FSInputFile(audio_path)
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                import shutil
                # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏
                video_dir = os.path.dirname(video_path)
                audio_dir = os.path.dirname(audio_path)
                shutil.rmtree(video_dir, ignore_errors=True)
                if video_dir != audio_dir:  # –ï—Å–ª–∏ —Ä–∞–∑–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    shutil.rmtree(audio_dir, ignore_errors=True)
            except:
                pass
            
            await log_event(msg.from_user.id, "download", f"both:{url}")
            
        except Exception as e:
            error_msg = format_error_message(str(e))
            await msg.reply(f"‚ùå {error_msg}")
            await log_event(msg.from_user.id, "error", f"download: {e}")
            
    except Exception as e:
        await msg.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def save_download_stats(user_id: int, url: str, file_path: str, kind: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    try:
        size = os.path.getsize(file_path)
        
        async with Session() as s:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
            user_result = await s.execute(select(User).where(User.tg_id == user_id))
            user = user_result.scalar()
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            if not user:
                user = User(
                    tg_id=user_id,
                    first_name="Unknown",
                    last_name=None,
                    username=None,
                    lang=None
                )
                s.add(user)
                await s.commit()
                await s.refresh(user)
            
            s.add(Download(
                user_id=user.id,
                source=("shorts" if "youtube" in url or "youtu.be" in url else ("reels" if "instagram" in url else "tiktok")),
                url=url,
                title=f"{os.path.basename(file_path)} ({kind})",
                duration_sec=None,
                file_size=size,
                ext=os.path.splitext(file_path)[1].lstrip("."),
            ))
            await s.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def format_error_message(error_msg: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö"""
    if "Requested format is not available" in error_msg or "format not available" in error_msg.lower():
        return "–§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
    elif "No suitable formats" in error_msg:
        return "–ü–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
    elif "Download failed" in error_msg:
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É."
    elif "ffmpeg" in error_msg.lower():
        return "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ."
    elif "Private video" in error_msg or "Video unavailable" in error_msg:
        return "–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ."
    elif "age-restricted" in error_msg.lower():
        return "–í–∏–¥–µ–æ –∏–º–µ–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è."
    elif "login required" in error_msg.lower() or "authentication" in error_msg.lower():
        return "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram."
    elif "instagram" in error_msg.lower() and ("unavailable" in error_msg.lower() or "not found" in error_msg.lower()):
        return "Instagram Reel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π."
    elif "HTTP Error 429" in error_msg or "Too Many Requests" in error_msg:
        return "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    else:
        return error_msg
